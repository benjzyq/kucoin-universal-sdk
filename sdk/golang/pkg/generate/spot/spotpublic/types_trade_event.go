// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package spotpublic

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// TradeEvent struct for TradeEvent
type TradeEvent struct {
	// common response
	CommonResponse *types.WsMessage
	MakerOrderId   string `json:"makerOrderId,omitempty"`
	Price          string `json:"price,omitempty"`
	Sequence       string `json:"sequence,omitempty"`
	Side           string `json:"side,omitempty"`
	Size           string `json:"size,omitempty"`
	Symbol         string `json:"symbol,omitempty"`
	TakerOrderId   string `json:"takerOrderId,omitempty"`
	Time           string `json:"time,omitempty"`
	TradeId        string `json:"tradeId,omitempty"`
	Type           string `json:"type,omitempty"`
}

// NewTradeEvent instantiates a new TradeEvent object
// This constructor will assign default values to properties that have it defined
func NewTradeEvent(makerOrderId string, price string, sequence string, side string, size string, symbol string, takerOrderId string, time string, tradeId string, Type_ string) *TradeEvent {
	this := TradeEvent{}
	this.MakerOrderId = makerOrderId
	this.Price = price
	this.Sequence = sequence
	this.Side = side
	this.Size = size
	this.Symbol = symbol
	this.TakerOrderId = takerOrderId
	this.Time = time
	this.TradeId = tradeId
	this.Type = Type_
	return &this
}

// NewTradeEventWithDefaults instantiates a new TradeEvent object
// This constructor will only assign default values to properties that have it defined,
func NewTradeEventWithDefaults() *TradeEvent {
	this := TradeEvent{}
	return &this
}

func (o *TradeEvent) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["makerOrderId"] = o.MakerOrderId
	toSerialize["price"] = o.Price
	toSerialize["sequence"] = o.Sequence
	toSerialize["side"] = o.Side
	toSerialize["size"] = o.Size
	toSerialize["symbol"] = o.Symbol
	toSerialize["takerOrderId"] = o.TakerOrderId
	toSerialize["time"] = o.Time
	toSerialize["tradeId"] = o.TradeId
	toSerialize["type"] = o.Type
	return toSerialize
}

type TradeEventCallback func(topic string, subject string, data *TradeEvent) error

type TradeEventCallbackWrapper struct {
	callback TradeEventCallback
}

func (w *TradeEventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &TradeEvent{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
