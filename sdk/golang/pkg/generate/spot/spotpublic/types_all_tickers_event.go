// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package spotpublic

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// AllTickersEvent struct for AllTickersEvent
type AllTickersEvent struct {
	// common response
	CommonResponse *types.WsMessage
	BestAsk        string `json:"bestAsk,omitempty"`
	BestAskSize    string `json:"bestAskSize,omitempty"`
	BestBid        string `json:"bestBid,omitempty"`
	BestBidSize    string `json:"bestBidSize,omitempty"`
	Price          string `json:"price,omitempty"`
	Sequence       string `json:"sequence,omitempty"`
	Size           string `json:"size,omitempty"`
	// The matching time of the latest transaction
	Time int64 `json:"time,omitempty"`
}

// NewAllTickersEvent instantiates a new AllTickersEvent object
// This constructor will assign default values to properties that have it defined
func NewAllTickersEvent(bestAsk string, bestAskSize string, bestBid string, bestBidSize string, price string, sequence string, size string, time int64) *AllTickersEvent {
	this := AllTickersEvent{}
	this.BestAsk = bestAsk
	this.BestAskSize = bestAskSize
	this.BestBid = bestBid
	this.BestBidSize = bestBidSize
	this.Price = price
	this.Sequence = sequence
	this.Size = size
	this.Time = time
	return &this
}

// NewAllTickersEventWithDefaults instantiates a new AllTickersEvent object
// This constructor will only assign default values to properties that have it defined,
func NewAllTickersEventWithDefaults() *AllTickersEvent {
	this := AllTickersEvent{}
	return &this
}

func (o *AllTickersEvent) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["bestAsk"] = o.BestAsk
	toSerialize["bestAskSize"] = o.BestAskSize
	toSerialize["bestBid"] = o.BestBid
	toSerialize["bestBidSize"] = o.BestBidSize
	toSerialize["price"] = o.Price
	toSerialize["sequence"] = o.Sequence
	toSerialize["size"] = o.Size
	toSerialize["time"] = o.Time
	return toSerialize
}

type AllTickersEventCallback func(topic string, subject string, data *AllTickersEvent) error

type AllTickersEventCallbackWrapper struct {
	callback AllTickersEventCallback
}

func (w *AllTickersEventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &AllTickersEvent{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
