// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package spotprivate

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// OrderV2Event struct for OrderV2Event
type OrderV2Event struct {
	// common response
	CommonResponse *types.WsMessage
	// Cumulative number of cancellations
	CanceledSize *string `json:"canceledSize,omitempty"`
	// Client Order ID: The ClientOid field is a unique ID created by the user
	ClientOid string `json:"clientOid,omitempty"`
	// Cumulative number filled
	FilledSize *string `json:"filledSize,omitempty"`
	// The unique order id generated by the trading system
	OrderId string `json:"orderId,omitempty"`
	// Gateway received the message time (milliseconds)
	OrderTime int64 `json:"orderTime,omitempty"`
	// User-specified order type
	OrderType string `json:"orderType,omitempty"`
	// User-specified order size
	OriginSize string `json:"originSize,omitempty"`
	// Price
	Price *string `json:"price,omitempty"`
	// Remain funds
	RemainFunds *string `json:"remainFunds,omitempty"`
	// Remain size
	RemainSize *string `json:"remainSize,omitempty"`
	// buy or sell
	Side string `json:"side,omitempty"`
	// User-specified order size
	Size *string `json:"size,omitempty"`
	// Order Status
	Status string `json:"status,omitempty"`
	// Symbol
	Symbol string `json:"symbol,omitempty"`
	// Match engine received the message time  (nanoseconds)
	Ts int64 `json:"ts,omitempty"`
	// Order Type
	Type string `json:"type,omitempty"`
	// The size before order update
	OldSize *string `json:"oldSize,omitempty"`
	// Actual Fee Type
	FeeType *string `json:"feeType,omitempty"`
	// Actual transaction order type, If the counterparty order is an [Hidden/Iceberg Order](https://www.kucoin.com/docs-new/doc-338146), even if it is a maker order, this param will be displayed as taker. For actual trading fee, please refer to the **feeType**
	Liquidity *string `json:"liquidity,omitempty"`
	// Match Price (when the type is \"match\")
	MatchPrice *string `json:"matchPrice,omitempty"`
	// Match Size (when the type is \"match\")
	MatchSize *string `json:"matchSize,omitempty"`
	// Trade ID: Generated by Matching engine.
	TradeId *string `json:"tradeId,omitempty"`
}

// NewOrderV2Event instantiates a new OrderV2Event object
// This constructor will assign default values to properties that have it defined
func NewOrderV2Event(clientOid string, orderId string, orderTime int64, orderType string, originSize string, side string, status string, symbol string, ts int64, Type_ string) *OrderV2Event {
	this := OrderV2Event{}
	this.ClientOid = clientOid
	this.OrderId = orderId
	this.OrderTime = orderTime
	this.OrderType = orderType
	this.OriginSize = originSize
	this.Side = side
	this.Status = status
	this.Symbol = symbol
	this.Ts = ts
	this.Type = Type_
	return &this
}

// NewOrderV2EventWithDefaults instantiates a new OrderV2Event object
// This constructor will only assign default values to properties that have it defined,
func NewOrderV2EventWithDefaults() *OrderV2Event {
	this := OrderV2Event{}
	return &this
}

func (o *OrderV2Event) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["canceledSize"] = o.CanceledSize
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["filledSize"] = o.FilledSize
	toSerialize["orderId"] = o.OrderId
	toSerialize["orderTime"] = o.OrderTime
	toSerialize["orderType"] = o.OrderType
	toSerialize["originSize"] = o.OriginSize
	toSerialize["price"] = o.Price
	toSerialize["remainFunds"] = o.RemainFunds
	toSerialize["remainSize"] = o.RemainSize
	toSerialize["side"] = o.Side
	toSerialize["size"] = o.Size
	toSerialize["status"] = o.Status
	toSerialize["symbol"] = o.Symbol
	toSerialize["ts"] = o.Ts
	toSerialize["type"] = o.Type
	toSerialize["oldSize"] = o.OldSize
	toSerialize["feeType"] = o.FeeType
	toSerialize["liquidity"] = o.Liquidity
	toSerialize["matchPrice"] = o.MatchPrice
	toSerialize["matchSize"] = o.MatchSize
	toSerialize["tradeId"] = o.TradeId
	return toSerialize
}

type OrderV2EventCallback func(topic string, subject string, data *OrderV2Event) error

type OrderV2EventCallbackWrapper struct {
	callback OrderV2EventCallback
}

func (w *OrderV2EventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &OrderV2Event{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
