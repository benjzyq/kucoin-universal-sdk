// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futurespublic

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// TickerV2Event struct for TickerV2Event
type TickerV2Event struct {
	// common response
	CommonResponse *types.WsMessage
	Symbol         string `json:"symbol,omitempty"`
	Sequence       int64  `json:"sequence,omitempty"`
	BestBidSize    int32  `json:"bestBidSize,omitempty"`
	BestBidPrice   string `json:"bestBidPrice,omitempty"`
	BestAskPrice   string `json:"bestAskPrice,omitempty"`
	BestAskSize    int32  `json:"bestAskSize,omitempty"`
	Ts             int64  `json:"ts,omitempty"`
}

// NewTickerV2Event instantiates a new TickerV2Event object
// This constructor will assign default values to properties that have it defined
func NewTickerV2Event(symbol string, sequence int64, bestBidSize int32, bestBidPrice string, bestAskPrice string, bestAskSize int32, ts int64) *TickerV2Event {
	this := TickerV2Event{}
	this.Symbol = symbol
	this.Sequence = sequence
	this.BestBidSize = bestBidSize
	this.BestBidPrice = bestBidPrice
	this.BestAskPrice = bestAskPrice
	this.BestAskSize = bestAskSize
	this.Ts = ts
	return &this
}

// NewTickerV2EventWithDefaults instantiates a new TickerV2Event object
// This constructor will only assign default values to properties that have it defined,
func NewTickerV2EventWithDefaults() *TickerV2Event {
	this := TickerV2Event{}
	return &this
}

func (o *TickerV2Event) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["sequence"] = o.Sequence
	toSerialize["bestBidSize"] = o.BestBidSize
	toSerialize["bestBidPrice"] = o.BestBidPrice
	toSerialize["bestAskPrice"] = o.BestAskPrice
	toSerialize["bestAskSize"] = o.BestAskSize
	toSerialize["ts"] = o.Ts
	return toSerialize
}

type TickerV2EventCallback func(topic string, subject string, data *TickerV2Event) error

type TickerV2EventCallbackWrapper struct {
	callback TickerV2EventCallback
}

func (w *TickerV2EventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &TickerV2Event{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
