// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futurespublic

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// InstrumentEvent struct for InstrumentEvent
type InstrumentEvent struct {
	// common response
	CommonResponse *types.WsMessage
	// Granularity (predicted funding rate: 1-min granularity: 60000; Funding rate: 8-hours granularity: 28800000.)
	Granularity int32    `json:"granularity,omitempty"`
	FundingRate *float64 `json:"fundingRate,omitempty"`
	Timestamp   int64    `json:"timestamp,omitempty"`
	MarkPrice   *float64 `json:"markPrice,omitempty"`
	IndexPrice  *float64 `json:"indexPrice,omitempty"`
}

// NewInstrumentEvent instantiates a new InstrumentEvent object
// This constructor will assign default values to properties that have it defined
func NewInstrumentEvent(granularity int32, timestamp int64) *InstrumentEvent {
	this := InstrumentEvent{}
	this.Granularity = granularity
	this.Timestamp = timestamp
	return &this
}

// NewInstrumentEventWithDefaults instantiates a new InstrumentEvent object
// This constructor will only assign default values to properties that have it defined,
func NewInstrumentEventWithDefaults() *InstrumentEvent {
	this := InstrumentEvent{}
	return &this
}

func (o *InstrumentEvent) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["granularity"] = o.Granularity
	toSerialize["fundingRate"] = o.FundingRate
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["markPrice"] = o.MarkPrice
	toSerialize["indexPrice"] = o.IndexPrice
	return toSerialize
}

type InstrumentEventCallback func(topic string, subject string, data *InstrumentEvent) error

type InstrumentEventCallbackWrapper struct {
	callback InstrumentEventCallback
}

func (w *InstrumentEventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &InstrumentEvent{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
