// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futurespublic

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// TickerV1Event struct for TickerV1Event
type TickerV1Event struct {
	// common response
	CommonResponse *types.WsMessage
	Symbol         string `json:"symbol,omitempty"`
	Sequence       int64  `json:"sequence,omitempty"`
	Side           string `json:"side,omitempty"`
	Size           int32  `json:"size,omitempty"`
	Price          string `json:"price,omitempty"`
	BestBidSize    int32  `json:"bestBidSize,omitempty"`
	BestBidPrice   string `json:"bestBidPrice,omitempty"`
	BestAskPrice   string `json:"bestAskPrice,omitempty"`
	TradeId        string `json:"tradeId,omitempty"`
	BestAskSize    int32  `json:"bestAskSize,omitempty"`
	Ts             int64  `json:"ts,omitempty"`
}

// NewTickerV1Event instantiates a new TickerV1Event object
// This constructor will assign default values to properties that have it defined
func NewTickerV1Event(symbol string, sequence int64, side string, size int32, price string, bestBidSize int32, bestBidPrice string, bestAskPrice string, tradeId string, bestAskSize int32, ts int64) *TickerV1Event {
	this := TickerV1Event{}
	this.Symbol = symbol
	this.Sequence = sequence
	this.Side = side
	this.Size = size
	this.Price = price
	this.BestBidSize = bestBidSize
	this.BestBidPrice = bestBidPrice
	this.BestAskPrice = bestAskPrice
	this.TradeId = tradeId
	this.BestAskSize = bestAskSize
	this.Ts = ts
	return &this
}

// NewTickerV1EventWithDefaults instantiates a new TickerV1Event object
// This constructor will only assign default values to properties that have it defined,
func NewTickerV1EventWithDefaults() *TickerV1Event {
	this := TickerV1Event{}
	return &this
}

func (o *TickerV1Event) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["sequence"] = o.Sequence
	toSerialize["side"] = o.Side
	toSerialize["size"] = o.Size
	toSerialize["price"] = o.Price
	toSerialize["bestBidSize"] = o.BestBidSize
	toSerialize["bestBidPrice"] = o.BestBidPrice
	toSerialize["bestAskPrice"] = o.BestAskPrice
	toSerialize["tradeId"] = o.TradeId
	toSerialize["bestAskSize"] = o.BestAskSize
	toSerialize["ts"] = o.Ts
	return toSerialize
}

type TickerV1EventCallback func(topic string, subject string, data *TickerV1Event) error

type TickerV1EventCallbackWrapper struct {
	callback TickerV1EventCallback
}

func (w *TickerV1EventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &TickerV1Event{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
