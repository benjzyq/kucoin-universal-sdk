// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futuresprivate

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// AllOrderEvent struct for AllOrderEvent
type AllOrderEvent struct {
	// common response
	CommonResponse *types.WsMessage
	// Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-221752070)
	Symbol string `json:"symbol,omitempty"`
	// User-specified order type
	OrderType *string `json:"orderType,omitempty"`
	// buy or sell
	Side string `json:"side,omitempty"`
	// Cumulative number of cancellations
	CanceledSize string `json:"canceledSize,omitempty"`
	// The unique order id generated by the trading system
	OrderId string `json:"orderId,omitempty"`
	// Margin Mode
	MarginMode string `json:"marginMode,omitempty"`
	// Order Type
	Type string `json:"type,omitempty"`
	// Gateway received the message time (milliseconds)
	OrderTime int64 `json:"orderTime,omitempty"`
	// User-specified order size
	Size string `json:"size,omitempty"`
	// Cumulative number filled
	FilledSize string `json:"filledSize,omitempty"`
	// Price
	Price string `json:"price,omitempty"`
	// Remain size
	RemainSize string `json:"remainSize,omitempty"`
	// Order Status
	Status string `json:"status,omitempty"`
	// Match engine received the message time  (nanoseconds)
	Ts int64 `json:"ts,omitempty"`
	// Actual transaction order type, If the counterparty order is an [Hidden/Iceberg Order](https://www.kucoin.com/docs-new/doc-338146), even if it is a maker order, this param will be displayed as taker. For actual trading fee, please refer to the **feeType**
	Liquidity *string `json:"liquidity,omitempty"`
	// Actual Fee Type
	FeeType *string `json:"feeType,omitempty"`
	// Match Price (when the type is \"match\")
	MatchPrice *string `json:"matchPrice,omitempty"`
	// Match Size (when the type is \"match\")
	MatchSize *string `json:"matchSize,omitempty"`
	// Trade ID: Generated by Matching engine.
	TradeId *string `json:"tradeId,omitempty"`
	// The size before order update
	OldSize *string `json:"oldSize,omitempty"`
	// Client Order ID: The ClientOid field is a unique ID created by the user
	ClientOid *string `json:"clientOid,omitempty"`
	// normal order or liquid order
	TradeType string `json:"tradeType,omitempty"`
}

// NewAllOrderEvent instantiates a new AllOrderEvent object
// This constructor will assign default values to properties that have it defined
func NewAllOrderEvent(symbol string, side string, canceledSize string, orderId string, marginMode string, Type_ string, orderTime int64, size string, filledSize string, price string, remainSize string, status string, ts int64, tradeType string) *AllOrderEvent {
	this := AllOrderEvent{}
	this.Symbol = symbol
	this.Side = side
	this.CanceledSize = canceledSize
	this.OrderId = orderId
	this.MarginMode = marginMode
	this.Type = Type_
	this.OrderTime = orderTime
	this.Size = size
	this.FilledSize = filledSize
	this.Price = price
	this.RemainSize = remainSize
	this.Status = status
	this.Ts = ts
	this.TradeType = tradeType
	return &this
}

// NewAllOrderEventWithDefaults instantiates a new AllOrderEvent object
// This constructor will only assign default values to properties that have it defined,
func NewAllOrderEventWithDefaults() *AllOrderEvent {
	this := AllOrderEvent{}
	return &this
}

func (o *AllOrderEvent) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["orderType"] = o.OrderType
	toSerialize["side"] = o.Side
	toSerialize["canceledSize"] = o.CanceledSize
	toSerialize["orderId"] = o.OrderId
	toSerialize["marginMode"] = o.MarginMode
	toSerialize["type"] = o.Type
	toSerialize["orderTime"] = o.OrderTime
	toSerialize["size"] = o.Size
	toSerialize["filledSize"] = o.FilledSize
	toSerialize["price"] = o.Price
	toSerialize["remainSize"] = o.RemainSize
	toSerialize["status"] = o.Status
	toSerialize["ts"] = o.Ts
	toSerialize["liquidity"] = o.Liquidity
	toSerialize["feeType"] = o.FeeType
	toSerialize["matchPrice"] = o.MatchPrice
	toSerialize["matchSize"] = o.MatchSize
	toSerialize["tradeId"] = o.TradeId
	toSerialize["oldSize"] = o.OldSize
	toSerialize["clientOid"] = o.ClientOid
	toSerialize["tradeType"] = o.TradeType
	return toSerialize
}

type AllOrderEventCallback func(topic string, subject string, data *AllOrderEvent) error

type AllOrderEventCallbackWrapper struct {
	callback AllOrderEventCallback
}

func (w *AllOrderEventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &AllOrderEvent{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
