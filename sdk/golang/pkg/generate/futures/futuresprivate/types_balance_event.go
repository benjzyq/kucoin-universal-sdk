// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futuresprivate

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// BalanceEvent struct for BalanceEvent
type BalanceEvent struct {
	// common response
	CommonResponse *types.WsMessage
	// Margin of the cross margin position
	CrossPosMargin string `json:"crossPosMargin,omitempty"`
	// Margin of the isolated margin order
	IsolatedOrderMargin string `json:"isolatedOrderMargin,omitempty"`
	// Frozen Balance
	HoldBalance string `json:"holdBalance,omitempty"`
	// Equity
	Equity string `json:"equity,omitempty"`
	// Version. When holding a cross margin position, the available balance may change with fluctuations in the mark price, leading to discrepancies in the available balance for the same version number.
	Version string `json:"version,omitempty"`
	// Available Balance
	AvailableBalance string `json:"availableBalance,omitempty"`
	// Margin of the isolated margin position, including isolated margin funding fees
	IsolatedPosMargin string `json:"isolatedPosMargin,omitempty"`
	// Wallet Balance
	WalletBalance string `json:"walletBalance,omitempty"`
	// Isolated margin funding fee
	IsolatedFundingFeeMargin string `json:"isolatedFundingFeeMargin,omitempty"`
	// Unrealized PNL in cross margin mode
	CrossUnPnl string `json:"crossUnPnl,omitempty"`
	// Total margin under cross margin mode
	TotalCrossMargin string `json:"totalCrossMargin,omitempty"`
	// Currency Symbol
	Currency string `json:"currency,omitempty"`
	//  Unrealized PNL in isolated margin mode
	IsolatedUnPnl string `json:"isolatedUnPnl,omitempty"`
	// Margin of the cross margin order
	CrossOrderMargin string `json:"crossOrderMargin,omitempty"`
	// Last modified time
	Timestamp string `json:"timestamp,omitempty"`
}

// NewBalanceEvent instantiates a new BalanceEvent object
// This constructor will assign default values to properties that have it defined
func NewBalanceEvent(crossPosMargin string, isolatedOrderMargin string, holdBalance string, equity string, version string, availableBalance string, isolatedPosMargin string, walletBalance string, isolatedFundingFeeMargin string, crossUnPnl string, totalCrossMargin string, currency string, isolatedUnPnl string, crossOrderMargin string, timestamp string) *BalanceEvent {
	this := BalanceEvent{}
	this.CrossPosMargin = crossPosMargin
	this.IsolatedOrderMargin = isolatedOrderMargin
	this.HoldBalance = holdBalance
	this.Equity = equity
	this.Version = version
	this.AvailableBalance = availableBalance
	this.IsolatedPosMargin = isolatedPosMargin
	this.WalletBalance = walletBalance
	this.IsolatedFundingFeeMargin = isolatedFundingFeeMargin
	this.CrossUnPnl = crossUnPnl
	this.TotalCrossMargin = totalCrossMargin
	this.Currency = currency
	this.IsolatedUnPnl = isolatedUnPnl
	this.CrossOrderMargin = crossOrderMargin
	this.Timestamp = timestamp
	return &this
}

// NewBalanceEventWithDefaults instantiates a new BalanceEvent object
// This constructor will only assign default values to properties that have it defined,
func NewBalanceEventWithDefaults() *BalanceEvent {
	this := BalanceEvent{}
	return &this
}

func (o *BalanceEvent) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["crossPosMargin"] = o.CrossPosMargin
	toSerialize["isolatedOrderMargin"] = o.IsolatedOrderMargin
	toSerialize["holdBalance"] = o.HoldBalance
	toSerialize["equity"] = o.Equity
	toSerialize["version"] = o.Version
	toSerialize["availableBalance"] = o.AvailableBalance
	toSerialize["isolatedPosMargin"] = o.IsolatedPosMargin
	toSerialize["walletBalance"] = o.WalletBalance
	toSerialize["isolatedFundingFeeMargin"] = o.IsolatedFundingFeeMargin
	toSerialize["crossUnPnl"] = o.CrossUnPnl
	toSerialize["totalCrossMargin"] = o.TotalCrossMargin
	toSerialize["currency"] = o.Currency
	toSerialize["isolatedUnPnl"] = o.IsolatedUnPnl
	toSerialize["crossOrderMargin"] = o.CrossOrderMargin
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize
}

type BalanceEventCallback func(topic string, subject string, data *BalanceEvent) error

type BalanceEventCallbackWrapper struct {
	callback BalanceEventCallback
}

func (w *BalanceEventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &BalanceEvent{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
