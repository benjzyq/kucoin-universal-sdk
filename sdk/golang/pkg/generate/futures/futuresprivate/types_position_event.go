// Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

package futuresprivate

import (
	json "github.com/goccy/go-json"
	"github.com/Kucoin/kucoin-universal-sdk/sdk/golang/pkg/types"
)

// PositionEvent struct for PositionEvent
type PositionEvent struct {
	// common response
	CommonResponse *types.WsMessage
	// Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-221752070)
	Symbol string `json:"symbol,omitempty"`
	// Whether it is cross margin.
	CrossMode bool `json:"crossMode,omitempty"`
	// ADL ranking percentile
	DelevPercentage float64 `json:"delevPercentage,omitempty"`
	// Open time
	OpeningTimestamp int64 `json:"openingTimestamp,omitempty"`
	// Current timestamp
	CurrentTimestamp int64 `json:"currentTimestamp,omitempty"`
	// Current position quantity
	CurrentQty int32 `json:"currentQty,omitempty"`
	// Current position value
	CurrentCost float64 `json:"currentCost,omitempty"`
	// Current commission
	CurrentComm float64 `json:"currentComm,omitempty"`
	// Unrealized value
	UnrealisedCost float64 `json:"unrealisedCost,omitempty"`
	// Accumulated realized gross profit value
	RealisedGrossCost float64 `json:"realisedGrossCost,omitempty"`
	// Current realized position value
	RealisedCost float64 `json:"realisedCost,omitempty"`
	// Opened position or not
	IsOpen bool `json:"isOpen,omitempty"`
	// Mark price
	MarkPrice float64 `json:"markPrice,omitempty"`
	// Mark Value
	MarkValue float64 `json:"markValue,omitempty"`
	// Position value
	PosCost float64 `json:"posCost,omitempty"`
	// Inital margin Cross = opening value/cross leverage; isolated = accumulation of initial margin for each transaction
	PosInit float64 `json:"posInit,omitempty"`
	// Bankruptcy cost Cross = mark value * imr; Isolated = position margin (accumulation of initial margin, additional margin, generated funding fees, etc.)
	PosMargin float64 `json:"posMargin,omitempty"`
	// Accumulated realized gross profit value
	RealisedGrossPnl float64 `json:"realisedGrossPnl,omitempty"`
	// Realized profit and loss
	RealisedPnl float64 `json:"realisedPnl,omitempty"`
	// Unrealized profit and loss
	UnrealisedPnl float64 `json:"unrealisedPnl,omitempty"`
	// Profit-loss ratio of the position
	UnrealisedPnlPcnt float64 `json:"unrealisedPnlPcnt,omitempty"`
	// Rate of return on investment
	UnrealisedRoePcnt float64 `json:"unrealisedRoePcnt,omitempty"`
	// Average entry price
	AvgEntryPrice float64 `json:"avgEntryPrice,omitempty"`
	// Liquidation price: For Cross Margin, you can refer to the liquidationPrice, and the liquidation is based on the risk rate.
	LiquidationPrice float64 `json:"liquidationPrice,omitempty"`
	// Bankruptcy price: For Cross Margin, you can refer to the bankruptPrice, and the liquidation is based on the risk rate.
	BankruptPrice float64 `json:"bankruptPrice,omitempty"`
	// Currency used to clear and settle the trades
	SettleCurrency string `json:"settleCurrency,omitempty"`
	// Margin Mode: CROSS, ISOLATED
	MarginMode string `json:"marginMode,omitempty"`
	// Position Side
	PositionSide string `json:"positionSide,omitempty"`
	// Leverage
	Leverage float64 `json:"leverage,omitempty"`
	// Auto deposit margin or not **Only applicable to Isolated Margin**
	AutoDeposit *bool `json:"autoDeposit,omitempty"`
	// Maintenance margin requirement
	MaintMarginReq *float64 `json:"maintMarginReq,omitempty"`
	// Risk limit **Only applicable to Isolated Margin**
	RiskLimit *int32 `json:"riskLimit,omitempty"`
	// Leverage of the order **Only applicable to Isolated Margin**
	RealLeverage *float64 `json:"realLeverage,omitempty"`
	// Added margin **Only applicable to Isolated Margin**
	PosCross *float64 `json:"posCross,omitempty"`
	// Bankruptcy cost **Only applicable to Isolated Margin**
	PosComm *float64 `json:"posComm,omitempty"`
	// Funding fees paid out **Only applicable to Isolated Margin**
	PosLoss *float64 `json:"posLoss,omitempty"`
	// The current remaining unsettled funding fee for the position **Only applicable to Isolated Margin**
	PosFunding *float64 `json:"posFunding,omitempty"`
	// Maintenance margin
	PosMaint *float64 `json:"posMaint,omitempty"`
	// Position margin **Only applicable to Isolated Margin**
	MaintMargin *float64 `json:"maintMargin,omitempty"`
	// Funding time
	FundingTime *int64 `json:"fundingTime,omitempty"`
	// Position size
	Qty *int32 `json:"qty,omitempty"`
	// Funding rate
	FundingRate *float64 `json:"fundingRate,omitempty"`
	// Funding fees
	FundingFee *float64 `json:"fundingFee,omitempty"`
	// Funding Fee Settlement Time (nanoseconds)
	Ts *int64 `json:"ts,omitempty"`
	// Adjustment isolated margin risk limit level successful or not
	Success *bool `json:"success,omitempty"`
	// Adjustment isolated margin risk limit level failure reason
	Msg *string `json:"msg,omitempty"`
}

// NewPositionEvent instantiates a new PositionEvent object
// This constructor will assign default values to properties that have it defined
func NewPositionEvent(symbol string, crossMode bool, delevPercentage float64, openingTimestamp int64, currentTimestamp int64, currentQty int32, currentCost float64, currentComm float64, unrealisedCost float64, realisedGrossCost float64, realisedCost float64, isOpen bool, markPrice float64, markValue float64, posCost float64, posInit float64, posMargin float64, realisedGrossPnl float64, realisedPnl float64, unrealisedPnl float64, unrealisedPnlPcnt float64, unrealisedRoePcnt float64, avgEntryPrice float64, liquidationPrice float64, bankruptPrice float64, settleCurrency string, marginMode string, positionSide string, leverage float64) *PositionEvent {
	this := PositionEvent{}
	this.Symbol = symbol
	this.CrossMode = crossMode
	this.DelevPercentage = delevPercentage
	this.OpeningTimestamp = openingTimestamp
	this.CurrentTimestamp = currentTimestamp
	this.CurrentQty = currentQty
	this.CurrentCost = currentCost
	this.CurrentComm = currentComm
	this.UnrealisedCost = unrealisedCost
	this.RealisedGrossCost = realisedGrossCost
	this.RealisedCost = realisedCost
	this.IsOpen = isOpen
	this.MarkPrice = markPrice
	this.MarkValue = markValue
	this.PosCost = posCost
	this.PosInit = posInit
	this.PosMargin = posMargin
	this.RealisedGrossPnl = realisedGrossPnl
	this.RealisedPnl = realisedPnl
	this.UnrealisedPnl = unrealisedPnl
	this.UnrealisedPnlPcnt = unrealisedPnlPcnt
	this.UnrealisedRoePcnt = unrealisedRoePcnt
	this.AvgEntryPrice = avgEntryPrice
	this.LiquidationPrice = liquidationPrice
	this.BankruptPrice = bankruptPrice
	this.SettleCurrency = settleCurrency
	this.MarginMode = marginMode
	this.PositionSide = positionSide
	this.Leverage = leverage
	return &this
}

// NewPositionEventWithDefaults instantiates a new PositionEvent object
// This constructor will only assign default values to properties that have it defined,
func NewPositionEventWithDefaults() *PositionEvent {
	this := PositionEvent{}
	return &this
}

func (o *PositionEvent) ToMap() map[string]interface{} {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	toSerialize["crossMode"] = o.CrossMode
	toSerialize["delevPercentage"] = o.DelevPercentage
	toSerialize["openingTimestamp"] = o.OpeningTimestamp
	toSerialize["currentTimestamp"] = o.CurrentTimestamp
	toSerialize["currentQty"] = o.CurrentQty
	toSerialize["currentCost"] = o.CurrentCost
	toSerialize["currentComm"] = o.CurrentComm
	toSerialize["unrealisedCost"] = o.UnrealisedCost
	toSerialize["realisedGrossCost"] = o.RealisedGrossCost
	toSerialize["realisedCost"] = o.RealisedCost
	toSerialize["isOpen"] = o.IsOpen
	toSerialize["markPrice"] = o.MarkPrice
	toSerialize["markValue"] = o.MarkValue
	toSerialize["posCost"] = o.PosCost
	toSerialize["posInit"] = o.PosInit
	toSerialize["posMargin"] = o.PosMargin
	toSerialize["realisedGrossPnl"] = o.RealisedGrossPnl
	toSerialize["realisedPnl"] = o.RealisedPnl
	toSerialize["unrealisedPnl"] = o.UnrealisedPnl
	toSerialize["unrealisedPnlPcnt"] = o.UnrealisedPnlPcnt
	toSerialize["unrealisedRoePcnt"] = o.UnrealisedRoePcnt
	toSerialize["avgEntryPrice"] = o.AvgEntryPrice
	toSerialize["liquidationPrice"] = o.LiquidationPrice
	toSerialize["bankruptPrice"] = o.BankruptPrice
	toSerialize["settleCurrency"] = o.SettleCurrency
	toSerialize["marginMode"] = o.MarginMode
	toSerialize["positionSide"] = o.PositionSide
	toSerialize["leverage"] = o.Leverage
	toSerialize["autoDeposit"] = o.AutoDeposit
	toSerialize["maintMarginReq"] = o.MaintMarginReq
	toSerialize["riskLimit"] = o.RiskLimit
	toSerialize["realLeverage"] = o.RealLeverage
	toSerialize["posCross"] = o.PosCross
	toSerialize["posComm"] = o.PosComm
	toSerialize["posLoss"] = o.PosLoss
	toSerialize["posFunding"] = o.PosFunding
	toSerialize["posMaint"] = o.PosMaint
	toSerialize["maintMargin"] = o.MaintMargin
	toSerialize["fundingTime"] = o.FundingTime
	toSerialize["qty"] = o.Qty
	toSerialize["fundingRate"] = o.FundingRate
	toSerialize["fundingFee"] = o.FundingFee
	toSerialize["ts"] = o.Ts
	toSerialize["success"] = o.Success
	toSerialize["msg"] = o.Msg
	return toSerialize
}

type PositionEventCallback func(topic string, subject string, data *PositionEvent) error

type PositionEventCallbackWrapper struct {
	callback PositionEventCallback
}

func (w *PositionEventCallbackWrapper) OnMessage(msg *types.WsMessage) error {
	obj := &PositionEvent{}
	err := json.Unmarshal(msg.RawData, obj)
	if err != nil {
		return err
	}
	obj.CommonResponse = msg
	return w.callback(msg.Topic, msg.Subject, obj)
}
